O tratamento de erros em Java é uma técnica fundamental que permite aos programadores:
 detectar, gerenciar e responder
 a situações anômalas que podem ocorrer durante a execução de um programa Java.
 Essas situações anômalas são frequentemente referidas como exceções e erros,
 e o tratamento adequado delas é crucial para criar aplicativos robustos e confiáveis.

 Vamos explorar os conceitos-chave relacionados ao tratamento de erros em Java:

**1. Exceções e Erros:**
   - Em Java, exceções e erros são representados por classes que herdam de `java.lang.Throwable`.
   - As exceções tem conserto, representam situações anômalas que podem ocorrer durante a execução de um programa, como uma divisão por zero ou
   uma tentativa de acessar um elemento de uma lista que não existe.
   - Os erros, por outro lado, são situações mais graves que normalmente não podem ser recuperadas pelo programa, como um erro de memória insuficiente (`OutOfMemoryError`) ou
   uma falha no sistema (`StackOverflowError`).

**2. Bloco try-catch:**
   - O tratamento de exceções em Java é realizado com a estrutura try-catch. Um bloco `try` é usado para envolver o código que pode gerar uma exceção.
   - Dentro do bloco `try`, se ocorrer uma exceção, o fluxo de controle será transferido para o bloco `catch` apropriado.
   - O bloco `catch` contém o código que lida com a exceção, como registrá-la, relatar informações de erro ou tomar ações corretivas.

**3. Cláusulas catch múltiplas:**
   - Você pode ter várias cláusulas `catch` após um bloco `try` para tratar diferentes tipos de exceções de maneira específica. Isso permite um tratamento mais granular dos erros.

**4. Cláusula finally:**
   - O bloco `finally` é opcional e pode ser usado após todas as cláusulas `catch` para definir código que será executado independentemente de ocorrer ou não uma exceção.
   - É útil para liberar recursos, como fechar arquivos ou conexões de banco de dados, garantindo que ações de limpeza sejam realizadas, independentemente de exceções ocorrerem ou não.

**5. Propagação de exceções:**
   - Se uma exceção não for tratada no método atual, ela será propagada para chamadores superiores até que seja tratada ou até que atinja o método `main`, onde geralmente resultará em um encerramento do programa.

**6. Criando exceções personalizadas:**
   - Você pode criar suas próprias classes de exceção personalizadas estendendo a classe `Exception` ou `RuntimeException` para lidar com situações específicas do seu aplicativo.

**7. Uso de `throw` e `throws`:**
   - A palavra-chave `throw` é usada para lançar manualmente uma exceção em um local específico do código.
   - A palavra-chave `throws` é usada em declarações de método para indicar que o método pode lançar exceções específicas. Os chamadores do método são obrigados a lidar com essas exceções ou declarar que também podem lançá-las.

**8. Tratamento de erros não verificáveis:**
   - Erros (como `OutOfMemoryError` e `StackOverflowError`) não precisam ser explicitamente tratados pelo programador, pois geralmente indicam falhas graves no ambiente de execução.

O tratamento de erros em Java permite que os desenvolvedores escrevam código mais robusto, que pode lidar com situações imprevistas de maneira controlada, em vez de interromper abruptamente a execução do programa. Ele promove boas práticas de programação, como registro de erros e tratamento de exceções, contribuindo para a confiabilidade e a estabilidade dos aplicativos Java.