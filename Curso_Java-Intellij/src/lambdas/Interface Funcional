Interface

	Assinatura ( Entrada x saída)   	 -    Nome     
	
			nada -> T(valor)    								 -    Supplier
			T(valor) -> nada    								 -    Consumer
			T(valor) -> Tipo(valor)  							 -    Unary Operator
			T,T (2 paramentros) -> T(valor)    			  		 -    Binary Operator   (tanto entrada e saída mesmo tipo)
			s -> T  (exemplo: recebe numero e retorna cliente)   -    Function
			Tipo(valor) -> Boolean    							 -    Predicate

Em Java, existem algumas interfaces funcionais predefinidas no pacote `java.util.function` que você pode usar para
várias finalidades. Essas interfaces facilitam a criação de funções lambda para situações comuns.
Alguns dos tipos mais comuns de interfaces funcionais em `java.util.function` incluem:

1. **Consumer (`Consumer<T>`)**: Aceita um argumento do tipo `T` e não retorna nada.
É usado quando você deseja executar uma ação em um objeto, como imprimir ou processar seus dados.

2. **Supplier (`Supplier<T>`)**: Não aceita nenhum argumento e retorna um valor do tipo `T`.
É usado quando você deseja fornecer um valor.

3. **Function (`Function<T, R>`)**: Aceita um argumento do tipo `T` e retorna um valor do tipo `R`.
É usado quando você deseja mapear um objeto de um tipo para outro.

4. **Predicate (`Predicate<T>`)**: Aceita um argumento do tipo `T` e retorna um valor booleano.
É usado para verificar uma condição em um objeto.

5. **BiFunction (`BiFunction<T, U, R>`)**: Aceita dois argumentos, um do tipo `T` e outro do tipo `U`,
e retorna um valor do tipo `R`. É usado para mapear dois objetos em um terceiro.

6. **UnaryOperator (`UnaryOperator<T>`)**: Uma especialização da interface `Function` onde o argumento
e o valor de retorno são do mesmo tipo `T`. É usado quando você deseja realizar uma operação de transformação no mesmo tipo de objeto.

7. **BinaryOperator (`BinaryOperator<T>`)**: Uma especialização da interface `BiFunction` onde os dois argumentos e
o valor de retorno são do mesmo tipo `T`. É usado quando você deseja realizar uma operação binária no mesmo tipo de objeto.

8. **BiPredicate (`BiPredicate<T, U>`)**: Aceita dois argumentos, um do tipo `T` e outro do tipo `U`, e
retorna um valor booleano. É usado para verificar uma condição em dois objetos.

Essas interfaces funcionais tornam mais fácil e legível o uso de funções lambda em Java, pois você pode
escolher a interface funcional que melhor corresponda à sua necessidade e criar funções lambda concisas e
expressivas com base nelas.

Por exemplo, se você estiver trabalhando com uma coleção de elementos e quiser aplicar uma ação a cada elemento,
você pode usar a interface `Consumer`. Se precisar fazer uma transformação em cada elemento da coleção, a interface `Function`
é útil, e assim por diante.