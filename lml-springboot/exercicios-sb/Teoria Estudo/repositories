Em Spring Boot, o conceito de "repository" geralmente se refere a uma parte importante do padrão de projeto Spring Data,
que é projetado para simplificar o acesso a dados em seu aplicativo.
Repositories são usados para interagir com bancos de dados de forma eficiente, abstraindo a complexidade das operações de
leitura e gravação.

Aqui estão os principais componentes relacionados a repositórios em Spring Boot:

1. **Entidades (Entities):**

    As entidades representam os objetos de dados que serão armazenados no banco de dados.
    Essas entidades são anotadas com `@Entity` e mapeadas para tabelas no banco de dados.

2. **Repositórios (Repositories):**

    Os repositórios são interfaces que estendem a interface `CrudRepository` ou `JpaRepository` fornecida pelo Spring Data.
    Eles definem métodos para realizar operações comuns de CRUD (Criar, Ler, Atualizar, Deletar) no banco de dados.
    Você não precisa fornecer a implementação para esses métodos, o Spring Data gera a implementação em tempo de execução.

```java
@Repository
public interface ExemploRepository extends JpaRepository<Exemplo, Long> {
    List<Exemplo> findByNome(String nome);
}
```

3. **Injeção de Dependência (Dependency Injection):**

    O Spring Boot cuida da criação e gerenciamento de instâncias de repositórios.
    Você pode injetar um repositório em seus serviços ou controladores usando a anotação `@Autowired`.
    Isso permite que você use o repositório para acessar e manipular dados no banco de dados de maneira simples e eficiente.

```java
@Service
public class ExemploService {
    @Autowired
    private ExemploRepository exemploRepository;

    // Métodos para acessar o repositório e manipular dados.
}
```

4. **Consultas Personalizadas (Custom Queries):**

    Além dos métodos gerados automaticamente pelo Spring Data, você pode criar consultas personalizadas em seus repositórios
    usando a anotação `@Query`. Isso permite que você escreva consultas JPQL (Java Persistence Query Language) para recuperar
    dados de maneira específica.

```java
public interface ExemploRepository extends JpaRepository<Exemplo, Long> {
    @Query("SELECT e FROM Exemplo e WHERE e.status = :status")
    List<Exemplo> findByStatus(@Param("status") String status);
}
```

Usar repositórios em Spring Boot é uma maneira eficaz de interagir com o banco de dados,
pois reduz a quantidade de código de acesso a dados que você precisa escrever, economizando tempo e minimizando erros.
Além disso, você pode alternar facilmente entre diferentes sistemas de banco de dados, como MySQL, PostgreSQL ou MongoDB,
sem precisar alterar muito o código do aplicativo, graças à flexibilidade do Spring Data.