Em Spring Boot, `ResponseEntity` é uma classe que representa toda a resposta HTTP,
incluindo o corpo, cabeçalhos e status, que você pode retornar de um controlador (controller) da sua aplicação.

    ResponseEntity<T>  =>  o T pode ser qualquer coisa, porém no return também tem que ser um 'ResponseEntity.' , veja exemplo no final

É uma parte fundamental do modelo de programação baseado em REST (Representational State Transfer) que é comumente usado para construir
aplicativos da web que seguem princípios RESTful.

`ResponseEntity` permite que você personalize a resposta HTTP retornada pelo seu controlador de várias maneiras.


Aqui está um exemplo de como usar `ResponseEntity` em um controlador Spring Boot:

```java
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ExemploController {

    @GetMapping("/exemplo")
    public ResponseEntity<String> exemplo() {       // ResponseEntity<Qualquer coisa>

        String mensagem = "Esta é uma resposta de exemplo";

        return ResponseEntity.ok(mensagem);     //a resposta tem que ser 'return ResponseEntity.' o '.ok' corresponde a '200'
        ou
        return ResponseEntity.badRequest().body("Erro na página");   //  '.badRequest()' corresponde a '400'
    }
}
```

Neste exemplo, o método `exemplo` retorna uma instância de `ResponseEntity` com uma mensagem de texto e o código de status "200 OK".
No entanto, você pode personalizar a resposta conforme necessário, definindo diferentes códigos de status, cabeçalhos e tipos de conteúdo
com base na lógica do seu aplicativo. Isso oferece grande flexibilidade ao lidar com as respostas HTTP em aplicativos Spring Boot.


Aqui estão alguns dos principais usos e recursos:

1. **Corpo (Body)**: Você pode especificar o corpo da resposta, que é o conteúdo que será enviado no corpo da resposta HTTP. O corpo é geralmente do tipo `Object` para acomodar qualquer tipo de conteúdo, mas você pode especificar o tipo desejado como um tipo genérico ao criar `ResponseEntity`. Exemplos:

   ```java
   ResponseEntity<String> responseEntity = new ResponseEntity<>("Corpo da resposta", HttpStatus.OK);
   ResponseEntity<User> userResponseEntity = new ResponseEntity<>(user, HttpStatus.OK);
   ```

2. **Status (HTTP Status)**: O código de status HTTP indica o resultado da solicitação. Você pode definir o código de status usando a enumeração `HttpStatus`. Exemplos:

   ```java
   ResponseEntity<String> responseEntity = new ResponseEntity<>("Corpo da resposta", HttpStatus.OK);
   ResponseEntity<User> userResponseEntity = new ResponseEntity<>(user, HttpStatus.CREATED);
   ```

3. **Cabeçalhos (Headers)**: Você pode adicionar cabeçalhos personalizados à resposta, como cabeçalhos de autorização, tipo de conteúdo e outros cabeçalhos específicos do aplicativo. Você pode usar a classe `HttpHeaders` para definir cabeçalhos. Exemplo:

   ```java
   HttpHeaders headers = new HttpHeaders();
   headers.add("Custom-Header", "Valor personalizado");
   ResponseEntity<String> responseEntity = new ResponseEntity<>("Corpo da resposta", headers, HttpStatus.OK);
   ```

4. **Tipo de Mídia (Media Type)**: Você pode especificar o tipo de mídia do conteúdo usando o cabeçalho "Content-Type". Isso ajuda o cliente a entender o formato do conteúdo. Exemplo:

   ```java
   HttpHeaders headers = new HttpHeaders();
   headers.setContentType(MediaType.APPLICATION_JSON);
   ResponseEntity<String> responseEntity = new ResponseEntity<>("{ \"chave\": \"valor\" }", headers, HttpStatus.OK);
   ```

5. **Outros parâmetros**: Além desses parâmetros principais, você pode passar outros detalhes personalizados, como cookies, codificação de caracteres, etc., conforme necessário.

A classe `ResponseEntity` oferece vários construtores sobrecarregados para acomodar diferentes combinações de parâmetros. Você pode escolher o construtor que melhor atenda às necessidades da sua resposta HTTP personalizada.